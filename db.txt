CREATE DATABASE IF NOT EXISTS NJITlogin;
USE NJITlogin;

CREATE TABLE users(
  user_id INT NOT NULL AUTO_INCREMENT,
  username VARCHAR(250) NOT NULL,
  password VARCHAR(250) NOT NULL,
  student BOOLEAN NOT NULL,
  PRIMARY KEY (user_id)
);

CREATE TABLE exam_list(
  list_id INT NOT NULL AUTO_INCREMENT,
  exam_name VARCHAR(50) NOT NULL,
  PRIMARY KEY (list_id)
);

CREATE TABLE questions(
  q_id INT NOT NULL AUTO_INCREMENT,
  name VARCHAR(50) NOT NULL,
  text TEXT NOT NULL,
  topic VARCHAR(50),
  difficulty VARCHAR(10),
  constraints VARCHAR(250),
  PRIMARY KEY (q_id)
);

CREATE TABLE grades(
  grade_id INT unsigned NOT NULL AUTO_INCREMENT,
  grade DOUBLE, 
  user_id INT NOT NULL,
  list_id INT NOT NULL,
  PRIMARY KEY (grade_id),
  FOREIGN KEY (user_id) REFERENCES users(user_id),
  FOREIGN KEY (list_id) REFERENCES exam_list(list_id)
);

CREATE TABLE exam(
  exam_id INT NOT NULL AUTO_INCREMENT,
  list_id INT NOT NULL,
  q_id int NOT NULL,
  PRIMARY KEY (exam_id),
  FOREIGN KEY (list_id) REFERENCES exam_list(list_id),
  FOREIGN KEY (q_id) REFERENCES questions(q_id)
);

DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS grades;
DROP TABLE IF EXISTS exam_list;
DROP TABLE IF EXISTS questions;
DROP TABLE IF EXISTS exam;

--------------------------------------------------------------------------------------------------------

DROP TABLE IF EXISTS exams;

CREATE TABLE IF NOT EXISTS exams(
  id INT NOT NULL AUTO_INCREMENT,
  exam_name VARCHAR(50) NOT NULL,
  PRIMARY KEY (id)
);

-- questions.sql
DROP TABLE IF EXISTS questions;

CREATE TABLE IF NOT EXISTS questions (
  id INT AUTO_INCREMENT,
  question_name VARCHAR(255),
  function_name VARCHAR(255),
  question_description TEXT,
  difficulty VARCHAR(255),
  topic VARCHAR(255), -- for loop, math, etc
  test_cases JSON, -- json_decode(test_cases)

  PRIMARY KEY(id)
);

-- exam_contents.sql
DROP TABLE IF EXISTS exam_contents;

CREATE TABLE IF NOT EXISTS exam_contents (
  exam_id INT,
  question_id INT, -- [1, 3]
  position INT, -- Question #2
  points INT,
  FOREIGN KEY (exam_id) REFERENCES exams(id),
  FOREIGN KEY (question_id) REFERENCES questions(id)
);

-- topics.sql
DROP TABLE IF EXISTS topics;

CREATE TABLE IF NOT EXISTS topics (
  topic VARCHAR(255),
  PRIMARY KEY(topic)
);

INSERT INTO topics VALUES ("Dict");
INSERT INTO topics VALUES ("Files");
INSERT INTO topics VALUES ("Functions");
INSERT INTO topics VALUES ("If");
INSERT INTO topics VALUES ("Lists");
INSERT INTO topics VALUES ("Loops");
INSERT INTO topics VALUES ("Math");
INSERT INTO topics VALUES ("Strings");

-- users.sql
DROP TABLE IF EXISTS users;

CREATE TABLE IF NOT EXISTS users (
  id VARCHAR(255),
  pass VARCHAR(255),
  user_type BOOLEAN,

  PRIMARY KEY(id)
);

-- grades.sql
DROP TABLE IF EXISTS grades;

CREATE TABLE IF NOT EXISTS grades (
  id INT AUTO_INCREMENT,
  exam_id INT,
  student_id VARCHAR(255),
  responses JSON,
  instructor_comments JSON,
  points_earned JSON, -- [25, 50]
  points_max JSON, -- [50, 50]
  finalized BOOLEAN,
  PRIMARY KEY(id),
  FOREIGN KEY(student_id) REFERENCES users(id),
  FOREIGN KEY(exam_id) REFERENCES exams(id)
);