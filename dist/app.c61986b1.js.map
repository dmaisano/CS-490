{"version":3,"sources":["scripts/utils.ts","modal/modal.ts","login/login.ts","app.ts"],"names":[],"mappings":"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","file":"app.c61986b1.js","sourceRoot":"../src","sourcesContent":["/**\n * send a POST request\n * @param url request url\n * @param data data object\n */\nexport function postRequest(url: RequestInfo, data: object = {}): Promise<any> {\n  return fetch(url, {\n    method: 'POST',\n    mode: 'cors',\n    cache: 'no-cache',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  }).catch(err => {\n    console.error(`fetch error`);\n    console.error(err);\n  });\n}\n\n/**\n * creates and returns a new HTML element\n * @param options config object\n */\nexport function createElem(options: {\n  type?: string;\n  id?: string;\n  className?: string;\n  attributes?: {\n    attribute: string;\n    data: string;\n  }[];\n  innerHTML?: string;\n}): HTMLElement {\n  const { type, id, className, attributes, innerHTML } = options;\n\n  const elem = document.createElement(type === null ? 'div' : type);\n\n  if (id) {\n    elem.setAttribute('id', options.id);\n  }\n\n  if (className) {\n    elem.setAttribute('class', options.className);\n  }\n\n  if (attributes && options.attributes.length) {\n    for (const obj of options.attributes) {\n      elem.setAttribute(obj.attribute, obj.data);\n    }\n  }\n\n  if (innerHTML) {\n    elem.innerHTML = options.innerHTML;\n  }\n\n  return elem;\n}\n\n/**\n * removes any children elems attached to the elem\n * @param AppRoot root element of the app\n */\nexport function removeChildren(\n  elem: HTMLDivElement = document.querySelector('body #root')\n): void {\n  while (elem.firstChild) {\n    elem.removeChild(elem.firstChild);\n  }\n}\n","import { removeChildren } from '../scripts/utils';\n\ninterface modalConfig {\n  title?: string; // optional modal title\n  body: string; // html stuffs\n}\n\nexport function createModal(options: modalConfig) {\n  const { title, body } = options;\n\n  const modalBox: HTMLDivElement = document.querySelector('body #modal-box');\n\n  modalBox.classList.remove('hidden');\n  modalBox.classList.add('modal-box');\n\n  // remove any existing elems\n  removeChildren(modalBox);\n\n  // create the modal\n  const modal = document.createElement('div');\n  modal.setAttribute('class', 'card modal');\n\n  if (title) {\n    const modalTitle = document.createElement('div');\n    modalTitle.setAttribute('class', 'card-title');\n    modalTitle.innerHTML = title;\n    modal.appendChild(modalTitle);\n  }\n\n  if (body) {\n    const modalBody = document.createElement('div');\n    modalBody.setAttribute('class', 'card-body');\n    modalBody.innerHTML = body;\n    modal.appendChild(modalBody);\n  }\n\n  // create the dismiss button\n  const modalFooter = document.createElement('div');\n  modalFooter.setAttribute('class', 'card-footer');\n  modalFooter.innerHTML = /*html*/ `\n    <button type=\"button\" id=\"dismiss-btn\" class=\"btn btn-danger\">Dismiss</button>\n  `;\n\n  modal.appendChild(modalFooter);\n\n  modalBox.appendChild(modal);\n\n  // add dismiss event\n  modalBox.querySelector('#dismiss-btn').addEventListener('click', () => {\n    modalBox.classList.add('hidden');\n    modalBox.classList.remove('modal-box');\n\n    removeChildren(modalBox);\n  });\n}\n","import highlander from '../assets/img/highlander.png';\nimport { createModal } from '../modal/modal';\nimport { postRequest } from '../scripts/utils';\nimport './login.scss';\n\nexport function LoginHandler(root: HTMLDivElement) {\n  root.innerHTML = LoginPage;\n\n  const card = root.querySelector(`.login .card`);\n\n  card.querySelector<HTMLImageElement>(`.card-image > img`).src = highlander;\n\n  const btn = card.querySelector<HTMLButtonElement>(`.btn-submit`);\n\n  btn.addEventListener('click', () => {\n    login();\n  });\n}\n\nfunction login() {\n  const user: string = document.querySelector<HTMLInputElement>(\n    `.login .card-body input:nth-child(1)`\n  ).value;\n  const pass: string = document.querySelector<HTMLInputElement>(\n    `.login .card-body input:nth-child(2)`\n  ).value;\n\n  console.log({\n    user,\n    pass,\n  });\n\n  postRequest('https://web.njit.edu/~bm424/curl.php', {\n    user,\n    pass,\n  })\n    .then(res => res.json())\n    .then((res: { njit: boolean; db: boolean }) => {\n      const njitResponse =\n        res.njit === true ? 'NJIT Likes You' : 'NJIT Does Not Like You';\n      const dbResponse =\n        res.db === true ? 'The DB Likes You' : 'The DB Does Not Like You';\n\n      const modalBody = /*html*/ `\n        <div>${njitResponse}</div>\n        <div>${dbResponse}</div>\n      `;\n\n      // create the modal\n      createModal({\n        title: 'POST Response',\n        body: modalBody,\n      });\n    })\n    .catch(err => {\n      console.log(err);\n    });\n}\n\nconst LoginPage: string = /*html*/ `\n  <div class=\"login-bg\"></div>\n\n  <div class=\"login\">\n    <div class=\"card\">\n      <div class=\"card-image\">\n        <img src=\"\">\n      </div>\n\n      <div class=\"card-title\">CS 490 Login</div>\n\n      <div class=\"card-body\">\n        <input type=\"text\" id=\"user\" placeholder=\"Username\" />\n        <input type=\"password\" id=\"pass\" placeholder=\"Password\" />\n      </div>\n\n      <div class=\"card-footer\">\n        <button type=\"submit\" class=\"btn btn-submit\">\n          Login\n        </button>\n      </div>\n    </div>\n  </div>\n`;\n","import { LoginHandler } from './login/login';\n\nconst AppRoot: HTMLDivElement = document.querySelector('body #root');\n\nexport function AppRouter(\n  AppRoot: HTMLDivElement = document.querySelector('body #root')\n): void {\n  let routeHandler;\n\n  switch (window.location.pathname) {\n    case '/':\n      routeHandler = LoginHandler;\n      break;\n\n    case '/login':\n      routeHandler = LoginHandler;\n      break;\n\n    default:\n      break;\n  }\n\n  routeHandler(AppRoot);\n}\n\n(function() {\n  // initialize the router\n  AppRouter(AppRoot);\n})();\n"]}